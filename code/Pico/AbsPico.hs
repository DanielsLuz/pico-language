

module Pico.AbsPico where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [Decl] [Stmt]
  deriving (Eq, Ord, Show, Read)

data Decl = Decl Ident Type
  deriving (Eq, Ord, Show, Read)

data Type = TInteger | TString
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Assignment Ident Expression
    | IfThenElse Expression Stmt Stmt
    | IfThen Expression Stmt
    | While Expression Stmt
    | Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Expression
    = GTE Expression Expression
    | LTE Expression Expression
    | Add Expression Expression
    | Sub Expression Expression
    | Mult Expression Expression
    | Div Expression Expression
    | Pow Expression Expression
    | Concat Expression Expression
    | Var Ident
    | EXPValue Value
  deriving (Eq, Ord, Show, Read)

data Value = STRValue String | INTValue Integer | None | Error
  deriving (Eq, Ord, Show, Read)

