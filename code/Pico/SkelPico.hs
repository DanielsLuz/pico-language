module Pico.SkelPico where

-- Haskell module generated by the BNF converter

import Pico.AbsPico
import Pico.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program decls stmts -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Decl ident type_ -> failure x
transType :: Type -> Result
transType x = case x of
  TInteger -> failure x
  TString -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  Assignment ident expression -> failure x
  IfThenElse expression stmt1 stmt2 -> failure x
  IfThen expression stmt -> failure x
  While expression stmt -> failure x
  Block stmts -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  GTE expression1 expression2 -> failure x
  LTE expression1 expression2 -> failure x
  Add expression1 expression2 -> failure x
  Sub expression1 expression2 -> failure x
  Mult expression1 expression2 -> failure x
  Div expression1 expression2 -> failure x
  Pow expression1 expression2 -> failure x
  Concat expression1 expression2 -> failure x
  Var ident -> failure x
  EXPValue value -> failure x
transValue :: Value -> Result
transValue x = case x of
  STRValue string -> failure x
  INTValue integer -> failure x
  None -> failure x
  Error -> failure x

