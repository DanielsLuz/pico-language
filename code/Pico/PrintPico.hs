{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Pico.PrintPico where

-- pretty-printer generated by the BNF converter

import Pico.AbsPico
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])


instance Print Program where
  prt i e = case e of
    Program decls stmts -> prPrec i 0 (concatD [doc (showString "begin"), doc (showString "declare"), prt 0 decls, prt 0 stmts, doc (showString "end.")])

instance Print Decl where
  prt i e = case e of
    Decl id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Type where
  prt i e = case e of
    TInteger -> prPrec i 0 (concatD [doc (showString "integer")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])

instance Print Stmt where
  prt i e = case e of
    Assignment id expression -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 expression])
    IfThenElse expression stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expression, doc (showString "then"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2, doc (showString "fi")])
    IfThen expression stmt -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expression, doc (showString "then"), prt 0 stmt, doc (showString "fi")])
    While expression stmt -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expression, doc (showString "do"), prt 0 stmt, doc (showString "od")])
    Block stmts -> prPrec i 0 (concatD [prt 0 stmts])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Expression where
  prt i e = case e of
    Var id -> prPrec i 0 (concatD [prt 0 id])
    EXPValue value -> prPrec i 0 (concatD [prt 0 value])
    GTE expression1 expression2 -> prPrec i 1 (concatD [prt 0 expression1, doc (showString ">"), prt 0 expression2])
    LTE expression1 expression2 -> prPrec i 1 (concatD [prt 0 expression1, doc (showString "<"), prt 0 expression2])
    Add expression1 expression2 -> prPrec i 2 (concatD [prt 0 expression1, doc (showString "+"), prt 0 expression2])
    Sub expression1 expression2 -> prPrec i 2 (concatD [prt 0 expression1, doc (showString "-"), prt 0 expression2])
    Mult expression1 expression2 -> prPrec i 3 (concatD [prt 0 expression1, doc (showString "*"), prt 0 expression2])
    Div expression1 expression2 -> prPrec i 3 (concatD [prt 0 expression1, doc (showString "/"), prt 0 expression2])
    Pow expression1 expression2 -> prPrec i 3 (concatD [prt 0 expression1, doc (showString "^"), prt 0 expression2])
    Concat expression1 expression2 -> prPrec i 3 (concatD [prt 0 expression1, doc (showString "||"), prt 0 expression2])

instance Print Value where
  prt i e = case e of
    STRValue str -> prPrec i 0 (concatD [prt 0 str])
    INTValue n -> prPrec i 0 (concatD [prt 0 n])
    None -> prPrec i 0 (concatD [doc (showString "None")])
    Error -> prPrec i 0 (concatD [doc (showString "Error")])


