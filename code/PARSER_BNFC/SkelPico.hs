module SkelPico where

-- Haskell module generated by the BNF converter

import AbsPico
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transPROGRAM :: PROGRAM -> Result
transPROGRAM x = case x of
  PICO_PROGRAM decls series -> failure x
transDECLS :: DECLS -> Result
transDECLS x = case x of
  DECLARATION0 idtypelist -> failure x
transID_TYPE_LIST :: ID_TYPE_LIST -> Result
transID_TYPE_LIST x = case x of
  ID_LIST0 id type_ -> failure x
  ID_LIST1 id type_ idtypelist -> failure x
transTYPE :: TYPE -> Result
transTYPE x = case x of
  TYPE_INTEGER -> failure x
  TYPE_STRING -> failure x
transSERIES :: SERIES -> Result
transSERIES x = case x of
  SERIES0 empty -> failure x
  SERIES1 stat series -> failure x
transSTAT :: STAT -> Result
transSTAT x = case x of
  STAT0 assign -> failure x
  STAT1 if_ -> failure x
  STAT2 while -> failure x
transASSIGN :: ASSIGN -> Result
transASSIGN x = case x of
  ASSIGN0 id exp -> failure x
transIF :: IF -> Result
transIF x = case x of
  IF0 exp series -> failure x
  IF1 exp series1 series2 -> failure x
transWHILE :: WHILE -> Result
transWHILE x = case x of
  WHILE0 exp series -> failure x
transEXP :: EXP -> Result
transEXP x = case x of
  EXP0 id -> failure x
  EXP1 integer -> failure x
  EXP2 string -> failure x
  EXP3 plus -> failure x
  EXP4 conc -> failure x
  EXP5 exp -> failure x
transPLUS :: PLUS -> Result
transPLUS x = case x of
  PLUS0 exp1 exp2 -> failure x
transCONC :: CONC -> Result
transCONC x = case x of
  CONC0 exp1 exp2 -> failure x
transID :: ID -> Result
transID x = case x of
  ID0 letter idchars -> failure x
  ID1 idchars -> failure x
transID_CHARS :: ID_CHARS -> Result
transID_CHARS x = case x of
  ID_CHARS1 idchar idchars -> failure x
  ID_CHARS2 empty -> failure x
transID_CHAR :: ID_CHAR -> Result
transID_CHAR x = case x of
  ID_CHAR1 letter -> failure x
transLETTER :: LETTER -> Result
transLETTER x = case x of
  LETTERS char -> failure x
transEMPTY :: EMPTY -> Result
transEMPTY x = case x of
  EMPTY0 idents -> failure x

