{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintPico where

-- pretty-printer generated by the BNF converter

import AbsPico
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])


instance Print PROGRAM where
  prt i e = case e of
    PICO_PROGRAM decls series -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 decls, prt 0 series, doc (showString "end.")])

instance Print DECLS where
  prt i e = case e of
    DECLARATION0 idtypelist -> prPrec i 0 (concatD [doc (showString "declare"), prt 0 idtypelist, doc (showString ";")])

instance Print ID_TYPE_LIST where
  prt i e = case e of
    ID_LIST0 id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    ID_LIST1 id type_ idtypelist -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString ","), prt 0 idtypelist])

instance Print TYPE where
  prt i e = case e of
    TYPE_INTEGER -> prPrec i 0 (concatD [doc (showString "integer")])
    TYPE_STRING -> prPrec i 0 (concatD [doc (showString "string")])

instance Print SERIES where
  prt i e = case e of
    SERIES0 empty -> prPrec i 0 (concatD [prt 0 empty])
    SERIES1 stat series -> prPrec i 0 (concatD [prt 0 stat, doc (showString ";"), prt 0 series])

instance Print STAT where
  prt i e = case e of
    STAT0 assign -> prPrec i 0 (concatD [prt 0 assign])
    STAT1 if_ -> prPrec i 0 (concatD [prt 0 if_])
    STAT2 while -> prPrec i 0 (concatD [prt 0 while])

instance Print ASSIGN where
  prt i e = case e of
    ASSIGN0 id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 exp])

instance Print IF where
  prt i e = case e of
    IF0 exp series -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 series, doc (showString "fi")])
    IF1 exp series1 series2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 series1, doc (showString "else"), prt 0 series2, doc (showString "fi")])

instance Print WHILE where
  prt i e = case e of
    WHILE0 exp series -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, doc (showString "do"), prt 0 series, doc (showString "od")])

instance Print EXP where
  prt i e = case e of
    EXP0 id -> prPrec i 0 (concatD [prt 0 id])
    EXP1 n -> prPrec i 0 (concatD [prt 0 n])
    EXP2 str -> prPrec i 0 (concatD [prt 0 str])
    EXP3 plus -> prPrec i 0 (concatD [prt 0 plus])
    EXP4 conc -> prPrec i 0 (concatD [prt 0 conc])
    EXP5 exp -> prPrec i 0 (concatD [doc (showString "("), prt 0 exp, doc (showString ")")])

instance Print PLUS where
  prt i e = case e of
    PLUS0 exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "+"), prt 0 exp2])

instance Print CONC where
  prt i e = case e of
    CONC0 exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "||"), prt 0 exp2])

instance Print ID where
  prt i e = case e of
    ID0 letter idchars -> prPrec i 0 (concatD [prt 0 letter, prt 0 idchars])
    ID1 idchars -> prPrec i 0 (concatD [prt 0 idchars])

instance Print ID_CHARS where
  prt i e = case e of
    ID_CHARS1 idchar idchars -> prPrec i 0 (concatD [prt 0 idchar, prt 0 idchars])
    ID_CHARS2 empty -> prPrec i 0 (concatD [prt 0 empty])

instance Print ID_CHAR where
  prt i e = case e of
    ID_CHAR1 letter -> prPrec i 0 (concatD [prt 0 letter])

instance Print LETTER where
  prt i e = case e of
    LETTERS c -> prPrec i 0 (concatD [prt 0 c])

instance Print EMPTY where
  prt i e = case e of
    EMPTY0 ids -> prPrec i 0 (concatD [prt 0 ids])


