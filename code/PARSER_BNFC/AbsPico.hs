

module AbsPico where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data PROGRAM = PICO_PROGRAM DECLS SERIES
  deriving (Eq, Ord, Show, Read)

data DECLS = DECLARATION0 ID_TYPE_LIST
  deriving (Eq, Ord, Show, Read)

data ID_TYPE_LIST
    = ID_LIST0 ID TYPE | ID_LIST1 ID TYPE ID_TYPE_LIST
  deriving (Eq, Ord, Show, Read)

data TYPE = TYPE_INTEGER | TYPE_STRING
  deriving (Eq, Ord, Show, Read)

data SERIES = SERIES0 EMPTY | SERIES1 STAT SERIES
  deriving (Eq, Ord, Show, Read)

data STAT = STAT0 ASSIGN | STAT1 IF | STAT2 WHILE
  deriving (Eq, Ord, Show, Read)

data ASSIGN = ASSIGN0 ID EXP
  deriving (Eq, Ord, Show, Read)

data IF = IF0 EXP SERIES | IF1 EXP SERIES SERIES
  deriving (Eq, Ord, Show, Read)

data WHILE = WHILE0 EXP SERIES
  deriving (Eq, Ord, Show, Read)

data EXP
    = EXP0 ID
    | EXP1 Integer
    | EXP2 String
    | EXP3 PLUS
    | EXP4 CONC
    | EXP5 EXP
  deriving (Eq, Ord, Show, Read)

data PLUS = PLUS0 EXP EXP
  deriving (Eq, Ord, Show, Read)

data CONC = CONC0 EXP EXP
  deriving (Eq, Ord, Show, Read)

data ID = ID0 LETTER ID_CHARS | ID1 ID_CHARS
  deriving (Eq, Ord, Show, Read)

data ID_CHARS = ID_CHARS1 ID_CHAR ID_CHARS | ID_CHARS2 EMPTY
  deriving (Eq, Ord, Show, Read)

data ID_CHAR = ID_CHAR1 LETTER
  deriving (Eq, Ord, Show, Read)

data LETTER = LETTERS Char
  deriving (Eq, Ord, Show, Read)

data EMPTY = EMPTY0 [Ident]
  deriving (Eq, Ord, Show, Read)

